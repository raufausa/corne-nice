/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-while-undecided;
            hold-trigger-key-positions = <6 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            hold-while-undecided;
            hold-trigger-on-release;
            hold-trigger-key-positions = <2 3 4 5 14 15 16 17 26 27 28 29 36 37 38 0 1 12 13 24 25>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        resetLayer: resetLayer {
            compatible = "zmk,behavior-hold-tap";
            label = "RESETLAYER";
            bindings = <&to>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <9 10>;
            layers = <0 1 2 3>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 22>;
            layers = <0 2 1 3>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <33 34>;
            layers = <0 2 1 3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0 1 2 3>;
        };

        NextTab {
            bindings = <&kp LG(LA(RIGHT))>;
            key-positions = <6 7>;
            layers = <0>;
        };

        PreviousTab {
            bindings = <&kp LG(LA(LEFT_ARROW))>;
            key-positions = <4 5>;
        };
    };

    macros {
        ShortcatLaunch: ShortcatLaunch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI &kp LEFT_SHIFT &kp SPACE>;
            label = "SHORTCATLAUNCH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB       &kp Q  &kp W                &kp E            &kp R            &kp T             &kp Y      &kp U             &kp I             &kp O                 &kp P     &kp ESC
&kp LEFT_ALT  &kp A  &HMR LEFT_CONTROL S  &HMR LEFT_ALT D  &HMR LEFT_GUI F  &kp G             &kp H      &HMR RIGHT_GUI J  &HMR RIGHT_ALT K  &HMR RIGHT_CONTROL L  &kp M     &kp SQT
&kp LSHFT     &kp Z  &kp X                &kp C            &kp V            &kp B             &kp N      &kp M             &kp COMMA         &kp DOT               &kp FSLH  &kp LEFT_CONTROL
                                          &kp LGUI         &mo 1            &kp LEFT_SHIFT    &kp SPACE  &mo 2             &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB       &kp N1          &kp N2        &kp N3        &kp N4     &kp N5               &kp N6        &trans          &trans         &trans          &kp N0            &kp ESCAPE
&kp LEFT_ALT  &kp NUMBER_6    &kp NUMBER_7  &kp N8        &kp N9     &kp N0               &trans        &trans          &trans         &trans          &kp SINGLE_QUOTE  &trans
&kp LSHFT     &kp LEFT_ARROW  &kp DOWN      &kp UP_ARROW  &kp RIGHT  &kp LG(LS(SPACE))    &kp CAPSLOCK  &kp LEFT_ARROW  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW   &kp LCTRL
                                            &kp LGUI      &trans     &kp LEFT_SHIFT       &kp SPACE     &trans          &kp BACKSPACE
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB       &kp EXCL   &kp AT         &kp HASH          &kp DLLR              &kp PRCNT                &msc SCRL_LEFT   &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_UP    &soft_off
&kp LEFT_ALT  &kp CARET  &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &msc SCRL_RIGHT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN  &kp GRAVE
&kp LSHFT     &kp MINUS  &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp GRAVE                &mkp LCLK        &kp LEFT_ARROW  &kp UP_ARROW    &kp DOWN         &kp RIGHT       &kp TILDE
                                        &kp LGUI          &trans                &kp LEFT_SHIFT           &kp SPACE        &trans          &kp BACKSLASH
            >;
        };

        Layer3 {
            bindings = <
&kp Q   &kp B   &kp E   &kp R   &kp T   &kp Y     &soft_off  &studio_unlock  &trans      &trans      &to 4       &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans          &trans      &trans      &to 5       &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans     &trans          &bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &trans
                        &trans  &trans  &trans    &trans     &trans          &trans
            >;
        };

        GamingLayer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E     &kp R     &kp T        &kp Y    &kp U   &kp I      &kp O    &kp P     &kp ESC
&kp LSHFT  &kp A  &kp S  &kp D     &kp F     &kp G        &kp H    &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LCTRL  &kp Z  &kp X  &kp C     &kp V     &kp B        &kp N    &kp M   &kp COMMA  &kp DOT  &kp FSLH  &resetLayer 0 LEFT_COMMAND
                         &kp LALT  &kp LGUI  &kp SPACE    &kp RET  &trans  &kp BSPC
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &resetLayer 0 LEFT_COMMAND
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        thirdlayer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
